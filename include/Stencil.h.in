#pragma once

#include <cstddef>
#include "hlslib/DataPack.h"

using Data_t = ${STENCIL_DATA_TYPE};

constexpr long kDataWidth = ${STENCIL_DATA_WIDTH};
constexpr long kPipeDepth = 4;
constexpr long kRows = ${STENCIL_ROWS};
constexpr long kTotalCols = ${STENCIL_COLS};
constexpr long kCols = kTotalCols / kDataWidth;
constexpr long kDepth = ${STENCIL_DEPTH};
constexpr long kHalo = (kDataWidth + kDepth - 1) / kDataWidth;
constexpr long kBlocks = ${STENCIL_BLOCKS};
constexpr long kTime = ${STENCIL_TIME};
constexpr long kColsPerBlock = kCols / kBlocks;
constexpr long kReadSize = 2 * (kColsPerBlock + kHalo) * kRows +
                          (kBlocks - 2) * (kColsPerBlock + 2 * kHalo) * kRows;
constexpr long kWriteSize = kRows * kCols;
constexpr long kTimeFolded = kTime / kDepth;
const Data_t kBoundary = 1;

using DataPack = hlslib::DataPack<Data_t, kDataWidth>;

static_assert(kBlocks > 1, "Must have multiple blocks");
static_assert(kTimeFolded % 2 == 0, "Number of folded timesteps must be even");

extern "C" {

void Kernel(DataPack const *read0, DataPack const *read1, DataPack *write0,
            DataPack *write1);

}
